/**
 * @fileoverview Firestore Security Rules for PrashikshanConnect.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, skills, and applications,
 * ensuring that only the authenticated user can read and write their own data.  Internships and MOUs
 * have more open read permissions, but write permissions are restricted.
 *
 * Data Structure:
 * - User profiles and associated data (skills, applications, certificates) are nested under /users/{userId}.
 * - Internship opportunities are stored in a top-level /internships collection.
 * - MOUs are stored in a top-level /mous collection.
 * - Industry user profiles are stored in the top-level /industryUsers collection.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data and associated subcollections.
 * - Public read access is granted for internships, but write access is restricted to authorized users.
 * - Listing of users is explicitly denied.
 *
 * Denormalization for Authorization:
 *  - Internships include an `industryUserId` field to simplify ownership checks for write operations.
 *  - Certificates include a `userId` field to simplify ownership checks.
 *
 * Structural Segregation:
 *  - Private user data is stored under /users/{userId}, while publicly accessible internship data is stored in the top-level /internships collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against the authenticated user ID.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for user profiles.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - Allow creating a user document if the authenticated user's ID matches the {userId}.
     * @allow (get, update, delete) - Allow if the authenticated user's ID matches the {userId}.
     * @deny (create) - Deny creating a user document if the authenticated user's ID does not match the {userId}.
     * @deny (get, update, delete) - Deny if the authenticated user's ID does not match the {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for user skills.
     * @path /databases/{database}/documents/users/{userId}/skills/{skillId}
     * @allow (create, get, update, delete, list) - Allow if the authenticated user's ID matches the {userId}.
     * @deny (create, get, update, delete, list) - Deny if the authenticated user's ID does not match the {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/skills/{skillId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Rule for user applications.
      * @path /databases/{database}/documents/users/{userId}/applications/{applicationId}
      * @allow (create, get, update, delete, list) - Allow if the authenticated user's ID matches the {userId}.
      * @deny (create, get, update, delete, list) - Deny if the authenticated user's ID does not match the {userId}.
      * @principle Enforces document ownership for all operations.
      */
    match /users/{userId}/applications/{applicationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.studentId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.studentId == resource.data.studentId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for internships.
     * @path /databases/{database}/documents/internships/{internshipId}
     * @allow (get, list) - Allow all users to read internships.
     * @allow (create, update, delete) - Only allow if the user is the industry user who created it.
     * @deny (create, update, delete) - Deny write access to anyone else.
     * @principle Public read access with owner-only writes, uses the internship.industryUserId to validate ownership.
     */
    match /internships/{internshipId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.industryUserId != null;
      allow update: if isSignedIn() && resource.data.industryUserId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.industryUserId == request.auth.uid && resource != null;
    }

    /**
     * @description Rule for MOUs.
     * @path /databases/{database}/documents/mous/{mouId}
     * @allow (get, list) - Allow all users to read MOUs.
     * @allow (create, update, delete) - Placeholder for role-based access.  In the future, this would be restricted to authorized users.
     * @deny (create, update, delete) - Currently denies all writes as no authorization rules are defined.
     */
    match /mous/{mouId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based authorization
    }

    /**
     * @description Rule for industry user profiles.
     * @path /databases/{database}/documents/industryUsers/{industryUserId}
     * @allow (get) - Allow if the user is the owner or an admin.
     * @allow (create) - Allow if the industry user's user ID matches the authenticated user's ID.
     * @allow (update, delete) - Allow if the user is the owner and the document exists.
     * @deny (get) - Deny if not the owner or an admin.
     * @deny (create, update, delete) - Deny if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /industryUsers/{industryUserId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(request.resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(request.resource.data.userId);
    }

    /**
     * @description Rule for certificates.
     * @path /databases/{database}/documents/certificates/{certificateId}
     * @allow (create, get, update, delete, list) - Allow if the authenticated user's ID matches the certificate's user ID.
     * @deny (create, get, update, delete, list) - Deny if the authenticated user's ID does not match the certificate's user ID.
     * @principle Enforces document ownership for all operations.
     */
    match /certificates/{certificateId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.userId == request.auth.uid && resource.data.userId == request.resource.data.userId;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
    }

    /**
     * @description Rule for recommendations.
     * @path /databases/{database}/documents/recommendations/{recommendationId}
     * @allow (create, get, update, delete, list) - Allow all authenticated users.
     * @deny (create, get, update, delete, list) - Deny unauthenticated users.
     */
    match /recommendations/{recommendationId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rule for feedback.
     * @path /databases/{database}/documents/feedback/{feedbackId}
     * @allow (create, get, update, delete, list) - Allow all authenticated users.
     * @deny (create, get, update, delete, list) - Deny unauthenticated users.
     */
    match /feedback/{feedbackId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn() && resource != null;
    }
  }
}