/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private user data
 * and allows public read access to internship listings. Write access to internships,
 * industry users, and MOUs is restricted.
 *
 * Data Structure:
 * - /users/{userId}: User profiles and settings.
 * - /users/{userId}/skills/{skillId}: Skills associated with a user.
 * - /users/{userId}/applications/{applicationId}: Internship applications submitted by the user.
 * - /internships/{internshipId}: Publicly available internship opportunities.
 * - /mous/{mouId}: Memorandum of Understanding documents (access restricted).
 * - /industryUsers/{industryUserId}: Industry user profiles, linked to a user account.
 * - /certificates/{certificateId}: Certificates uploaded by users, stored with metadata.
 * - /recommendations/{recommendationId}: Recommendations for users.
 * - /feedback/{feedbackId}: Feedback on recommendations.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents and associated subcollections (skills, applications, certificates).
 * - Internship listings are publicly readable, but write access is restricted.
 * - Industry user profiles are readable and writable only by the associated user.
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * - Internships could benefit from denormalizing an 'ownerId' field to simplify write rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user123' cannot create a profile with a different ID ('user456').
     * @deny (get) User with ID 'user123' cannot read another user's profile ('user456').
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Manages access to user skill documents.
     * @path /users/{userId}/skills/{skillId}
     * @allow (create) User with ID 'user123' can create a skill under their profile.
     * @allow (get) User with ID 'user123' can read a skill under their profile.
     * @allow (update) User with ID 'user123' can update a skill under their profile.
     * @allow (delete) User with ID 'user123' can delete a skill under their profile.
     * @deny (create) User with ID 'user123' cannot create a skill under another user's profile ('user456').
     * @deny (get) User with ID 'user123' cannot read a skill under another user's profile ('user456').
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/skills/{skillId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages access to user application documents.
     * @path /users/{userId}/applications/{applicationId}
     * @allow (create) User with ID 'user123' can create an application under their profile.
     * @allow (get) User with ID 'user123' can read an application under their profile.
     * @allow (update) User with ID 'user123' can update an application under their profile.
     * @allow (delete) User with ID 'user123' can delete an application under their profile.
     * @deny (create) User with ID 'user123' cannot create an application under another user's profile ('user456').
     * @deny (get) User with ID 'user123' cannot read an application under another user's profile ('user456').
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages access to internship documents.
     * @path /internships/{internshipId}
     * @allow (get) Any user can read internship details.
     * @allow (list) Any user can list internships.
     * @deny (create) No user can create an internship. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) No user can update an internship. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) No user can delete an internship. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read access with restricted write access.
     */
    match /internships/{internshipId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to MoU documents.
     * @path /mous/{mouId}
     * @deny (get) No user can read MoU details. // TODO: Add role-based validation once the schema is updated with a role field.
     * @deny (list) No user can list MoUs. // TODO: Add role-based validation once the schema is updated with a role field.
     * @deny (create) No user can create an MoU. // TODO: Add role-based validation once the schema is updated with a role field.
     * @deny (update) No user can update an MoU. // TODO: Add role-based validation once the schema is updated with a role field.
     * @deny (delete) No user can delete an MoU. // TODO: Add role-based validation once the schema is updated with a role field.
     * @principle Restricted access based on roles.
     */
    match /mous/{mouId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false; // TODO: Add role-based validation once the schema is updated with a role field.
      allow list: if false; // TODO: Add role-based validation once the schema is updated with a role field.
      allow create: if false; // TODO: Add role-based validation once the schema is updated with a role field.
      allow update: if false; // TODO: Add role-based validation once the schema is updated with a role field.
      allow delete: if false; // TODO: Add role-based validation once the schema is updated with a role field.
    }

    /**
     * @description Manages access to industry user documents.
     * @path /industryUsers/{industryUserId}
     * @allow (create) Industry user can create their profile.
     * @allow (get) Industry user can read their profile.
     * @allow (update) Industry user can update their profile.
     * @allow (delete) Industry user can delete their profile.
     * @deny (create) User with ID 'industryUser123' cannot create a profile with a different ID ('industryUser456').
     * @deny (get) User with ID 'industryUser123' cannot read another user's profile ('industryUser456').
     * @principle Enforces document ownership for writes.
     */
    match /industryUsers/{industryUserId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(industryUserId) {
          return request.auth.uid == get(/databases/$(database)/documents/industryUsers/$(industryUserId)).data.userId;
      }

      allow get: if isOwner(industryUserId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(industryUserId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isOwner(industryUserId);
    }

      /**
       * @description Manages access to certificates documents.
       * @path /certificates/{certificateId}
       * @allow (create) User with ID 'user123' can create their own certificate.
       * @allow (get) User with ID 'user123' can read their certificate.
       * @allow (update) User with ID 'user123' can update their certificate.
       * @allow (delete) User with ID 'user123' can delete their certificate.
       * @deny (create) User with ID 'user123' cannot create a certificate with a different ID ('user456').
       * @deny (get) User with ID 'user123' cannot read another user's certificate ('user456').
       * @principle Enforces document ownership for writes.
       */
    match /certificates/{certificateId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(certificateId) {
        return request.auth.uid == get(/databases/$(database)/documents/certificates/$(certificateId)).data.userId;
      }

      allow get: if isOwner(certificateId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(certificateId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isOwner(certificateId);
    }

    /**
     * @description Manages access to recommendation documents.
     * @path /recommendations/{recommendationId}
     */
    match /recommendations/{recommendationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // Recommendations are globally readable.  However, for any particular user,
      // the recommendation is only useful to the user to whom it's directed.
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to feedback documents.
     * @path /feedback/{feedbackId}
     */
    match /feedback/{feedbackId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // Feedback is public information
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}