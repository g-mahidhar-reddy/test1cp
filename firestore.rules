rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces strict ownership for user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == request.resource.data.id
     * @deny (get) if request.auth.uid != userId
     * @deny (create) if request.auth.uid != request.resource.data.id
     * @deny (update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId) && isSignedIn();
      allow delete: if isOwner(userId) && isSignedIn();
    }

    /**
     * @description Enforces strict ownership for internship applications. Only the authenticated user can read or write their own applications.
     * @path /users/{userId}/applications/{applicationId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == userId
     * @deny (get) if request.auth.uid != userId
     * @deny (create) if request.auth.uid != userId
     * @deny (update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/applications/{applicationId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId) && isSignedIn();
      allow delete: if isOwner(userId) && isSignedIn();
    }

    /**
     * @description Allows public read access to internships, but restricts write access.
     * @path /internships/{internshipId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if false
     * @principle Allows public read access while restricting write access.
     */
    match /internships/{internshipId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

       /**
     * @description Restricts access to MOUs.
     * @path /mous/{mouId}
     */
    match /mous/{mouId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

      /**
     * @description Restricts access to industry users.
     * @path /industryUsers/{industryUserId}
     */
    match /industryUsers/{industryUserId} {
       function isOwner(industryUserId) {
        return request.auth.uid == industryUserId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(industryUserId);
      allow list: if false;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isOwner(industryUserId) && isSignedIn();
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}